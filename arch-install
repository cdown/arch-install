#!/bin/bash -e

# curl -Lo setup https://bit.ly/1amkr3b

set -x

read -rp "Hostname: " hostname
read -rp "Device: " device
read -rp "Timezone: " timezone

short_hostname=${hostname::5}
extra=''

if [[ $device == *nvme* ]]; then
    # nvme devices look like /dev/nvme0n1 as the base device, then
    # /dev/nvme0n1p1 as the partition
    extra=p
fi

boot_partition=${device}${extra}1
root_partition=${device}${extra}2

sgdisk -Z "$device"
sgdisk -n 1:0:512M "$device"
sgdisk -t 1:ef00 "$device"  # part type to ESP
sgdisk -c 1:ESP "$device"
sgdisk -N 2 "$device"
sgdisk -c 2:Root "$device"
mkfs.msdos -F32 -n "$short_hostname"-/boot "$boot_partition"

mountpoint=$(mktemp -d)

root_crypt_device=cryptroot
root_crypt_device_path=/dev/mapper/$root_crypt_device

cryptsetup -y -v luksFormat "$root_partition"
cryptsetup luksOpen --allow-discards "$root_partition" "$root_crypt_device"
mkfs.btrfs -f -l 32K -n 32K -L "$short_hostname"-/ "$root_crypt_device_path"
mount -o noatime,compress=lzo "$root_crypt_device_path" "$mountpoint"

mkdir -p "$mountpoint"/boot
mount "$boot_partition" "$mountpoint"/boot

pacman -Syy
pacman --noconfirm --ignore pacman -S reflector tmux

reflector \
    -c 'United Kingdom' -c France -c Germany -c Sweden -c Finland -c Denmark \
    -c Ireland -c Netherlands -c 'Hong Kong' -c Singapore -c 'United States' \
    -c Canada -f 6 --protocol http --sort rate --save /etc/pacman.d/mirrorlist

pacstrap "$mountpoint" base base-devel git ansible

cp /etc/pacman.d/mirrorlist "$mountpoint"/etc/pacman.d/mirrorlist

cat > "$mountpoint"/etc/fstab << EOF
LABEL=$short_hostname-/boot /boot vfat  defaults,noatime 0 1
LABEL=$short_hostname-/     /     btrfs defaults,noatime,compress=lzo 0 1
EOF

echo "$hostname" > "$mountpoint"/etc/hostname

arch-chroot "$mountpoint" ln -sf /usr/share/zoneinfo/"$timezone" /etc/localtime

arch-chroot "$mountpoint" mkdir -p /root/git
arch-chroot "$mountpoint" git clone --recursive https://github.com/cdown/ansible-desktop.git /root/git/ansible-desktop

# systemd won't execute in a plain chroot, we need a namespaced container with
# its own systemd pid 1.
session_name=ansible
machine_name=ansible
tmux new-session -d -s "$session_name" \
    systemd-nspawn -b -M "$machine_name" -D "$mountpoint" \
        --bind /dev/mapper/control \
        --bind "/lib/modules/$(uname -r)" \
        --bind "$device" \
        --bind "$boot_partition" \
        --bind "$root_partition"
tmux new-window -t "$session_name" \
    "sleep 10 && systemd-run -t --machine \"$machine_name\" /root/git/ansible-desktop/run && machinectl poweroff ansible && tmux kill-session -t ansible"
tmux select-window -t "$session_name:1"
tmux attach -t "$session_name"

echo "Root password:"
while ! arch-chroot "$mountpoint" passwd; do :; done

for user in cdown lin; do
    if grep -q "^$user:" "$mountpoint"/etc/passwd; then
        echo "$user password:"
        while ! arch-chroot "$mountpoint" passwd "$user"; do :; done
    fi
done
